// The generator block tells Prisma to generate the client library for database access.
generator client {
  provider = "prisma-client-js"
}

// The datasource block configures the database connection.
// It uses PostgreSQL and reads the connection string from the DATABASE_URL environment variable.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core reference data

enum LocationType {
  MAIN
  COLD
  REMOTE
  OTHER
}

enum Unit {
  UNIT        // Stk
  BOX         // Eske/Boks
  PALLET      // Pall
  BAG         // Pose
  BOTTLE      // Flaske
  TUBE        // Rør
  PLATE       // Plate
  KIT         // Sett
  LITER       // Liter
  GRAM        // Gram
  KILOGRAM    // Kilo
  MILLILITER  // ml
  PACK        // Pakke
  ROLL        // Rull
}

// New enums for critical system improvements
enum TransactionType {
  RECEIPT      // Mottak (Inn)
  CONSUMPTION  // Forbruk (Ut) 
  ADJUSTMENT   // Justering (Inn/Ut - f.eks. etter telling)
  TRANSFER     // Overføring mellom lokasjoner
  INITIAL_COUNT // Initial synkronisering (Inn)
}

enum Role {
  ADMIN        // Full tilgang
  PURCHASER    // Kan bestille og motta varer
  LAB_USER     // Kan registrere forbruk og se lagerstatus
  VIEWER       // Kun lesetilgang
}

enum CountingStatus {
  PLANNED      // Planlagt telling
  IN_PROGRESS  // Pågående telling
  COMPLETED    // Fullført, venter godkjenning
  APPROVED     // Godkjent og justert
}

// User management for proper audit trail and RBAC
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  password        String    // Hashed password
  role            Role      @default(LAB_USER)
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  
  // Relations - all actions traced to users
  receiptsReceived        Receipt[]
  ordersRequested        PurchaseOrder[]
  transactions           InventoryTransaction[]
  countingSessionsPlanned CycleCountingSession[] @relation("PlannedBy")
  countingSessionsCounted CycleCountingSession[] @relation("CountedBy") 
  countingSessionsApproved CycleCountingSession[] @relation("ApprovedBy")
  attachmentsUploaded     Attachment[]
  countingLines          CycleCountingLine[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SupplierCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String? @db.Text
  
  suppliers   Supplier[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CompanySettings {
  id                    String @id @default(cuid())
  
  // Bedriftsinformasjon
  companyName           String @default("Labora Digital")
  organizationNumber    String?
  
  // Leveringsadresse
  deliveryAddress       String? @db.Text
  deliveryPostalCode    String?
  deliveryCity          String?
  deliveryCountry       String? @default("Norge")
  
  // Fakturaadresse
  invoiceAddress        String? @db.Text
  invoicePostalCode     String?
  invoiceCity           String?
  invoiceCountry        String? @default("Norge")
  
  // Kontaktinformasjon
  phone                 String?
  email                 String?
  website               String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Supplier {
  id                     String   @id @default(cuid())
  name                   String
  
  // Kategorisering
  categoryId             String?
  category               SupplierCategory? @relation(fields: [categoryId], references: [id])
  
  // Bestillingsmetoder og kontakt (fra CSV)
  orderMethod            String?  @db.Text            // Ordre via (Web, E-post, etc.)
  website                String?  @db.Text            // Nettside/webshop
  generalEmail           String?  @db.Text            // Generell e-post (info@, support@)
  orderEmail             String?  @db.Text            // Bestilling E-post
  contactPerson          String?  @db.Text            // Vår kontaktperson
  phone                  String?  @db.Text            // Telefon
  username               String?  @db.Text            // Brukernavn for webshop
  
  // SIKKERHET: Passord lagres IKKE i klartekst! 
  credentialsVaultId     String?  @db.Text            // Referanse til ekstern password vault
  credentialsNotes       String?  @db.Text            // Instruksjoner for tilgang (f.eks. "Se IT for login")
  
  // Konsolidert informasjon fra CSV
  notes                  String?  @db.Text            // Info/avtale, produkter, etc.
  
  // Legacy fields (for bakoverkompatibilitet)
  shortCode              String?  @unique
  accountNumber          String?  @db.Text
  contactName            String?  @db.Text            // DEPRECATED: Bruk contactPerson
  contactEmail           String?  @db.Text            // DEPRECATED: Bruk orderEmail  
  contactPhone           String?  @db.Text            // DEPRECATED: Bruk phone
  orderingMethod         String?  @db.Text            // DEPRECATED: Bruk orderMethod
  portalUsername         String?  @db.Text            // DEPRECATED: Bruk username
  // SIKKERHET: portalPassword FJERNET - bruk credentialsVaultId i stedet
  
  // Fraktoptimalisering (KRITISK for kostnadstyring)
  freeShippingThreshold  Decimal? @db.Decimal(10, 2)  // Grense for gratis frakt
  standardShippingCost   Decimal? @db.Decimal(10, 2)  // Standard fraktkostnad
  shippingNotes          String?  @db.Text            // Spesielle betingelser
  
  // Bestillingsinstruksjoner (Forhindrer feil)
  orderingInstructions   String?  @db.Text            // F.eks. "Husk fakturareferanse XXX"
  
  // Nye felter for leverandørhåndtering
  globalDiscountCode     String?  @db.Text            // Global rabattkode for denne leverandøren
  
  // Avtaler og kontrakter
  contractId             String?  @db.Text            // Kontraktnummer/avtale-ID
  contractUrl            String?  @db.Text            // Link til avtale/kontrakt
  contractExpiryDate     DateTime?                    // Når avtalen utløper

  items                  Item[]
  supplierItems          SupplierItem[]  // Ny prisbok-relasjon
  discounts             Discount[]
  purchaseOrders         PurchaseOrder[]
  receipts              Receipt[]

  // Relasjoner til nye modeller
  contacts               ContactPerson[]
  attachments            Attachment[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([name, categoryId])
}

// Flere kontaktpersoner per leverandør
model ContactPerson {
  id          String   @id @default(cuid())
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  
  name        String   @db.Text
  role        String?  @db.Text  // F.eks. "Salgsansvarlig", "Teknisk support"
  email       String?  @db.Text
  phone       String?  @db.Text
  isPrimary   Boolean  @default(false)  // Primær kontaktperson
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Vedlegg/filer knyttet til leverandører
model Attachment {
  id          String   @id @default(cuid())
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  
  filename    String   @db.Text
  originalName String  @db.Text
  mimeType    String   @db.Text
  size        Int                      // Filstørrelse i bytes
  url         String   @db.Text        // Sti til filen
  description String?  @db.Text        // Beskrivelse av vedlegget
  category    AttachmentCategory @default(OTHER)
  
  // Avtale-spesifikke felt
  validUntil         DateTime? // Når avtalen/dokumentet utløper
  agreementReference String?   @db.Text // Referanse til avtalen (f.eks. "Labforum 2025")
  
  uploadedBy  String?
  uploader    User?    @relation(fields: [uploadedBy], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AttachmentCategory {
  CONTRACT     // Kontrakt/avtale
  PRICE_LIST   // Prisliste
  CERTIFICATE  // Sertifikat
  MANUAL       // Brukermanual
  OTHER        // Annet
}

model Location {
  id        String       @id @default(cuid())
  name      String       @unique
  code      String?      @unique
  qrCode    String?      @unique              // QR-kode for lokasjon
  type      LocationType @default(MAIN)
  notes     String?      @db.Text

  lots              InventoryLot[]
  receiptLines      ReceiptLine[]
  defaultForItems   Item[]  // Items that have this location as default
  countingSessions  CycleCountingSession[]

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// FJERNET: ItemCategory enum erstattet med Category-modell for fleksibilitet
// Kategorier håndteres nå via Category-tabellen for bedre administrasjon

model Department {
  id        String @id @default(cuid())
  name      String @unique
  code      String @unique
  
  items             Item[]
  orderLines        PurchaseOrderLine[]
  countingSessions  CycleCountingSession[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String? @db.Text
  
  items             Item[]
  countingSessions  CycleCountingSession[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Koblingstabell for prisstyring og leverandørspesifikke detaljer
model SupplierItem {
  id                  String   @id @default(cuid())
  
  // Relasjoner
  itemId              String
  item                Item     @relation(fields: [itemId], references: [id])
  supplierId          String
  supplier            Supplier @relation(fields: [supplierId], references: [id])

  // Identifikasjon hos leverandør
  supplierPartNumber  String   @db.Text  // Leverandørens artikkelnummer (Best.nr) - Kritisk!
  productUrl          String?  @db.Text  // Link til aktuelt produkt hos denne leverandøren

  // Prisstruktur (VIKTIG: Bruk Decimal for valuta, ikke Float, for nøyaktighet)
  listPrice           Decimal? @db.Decimal(10, 2)  // Veiledende listepris (før rabatt)
  negotiatedPrice     Decimal  @db.Decimal(10, 2)  // Laboras faktiske pris (etter rabatt)
  currency            String   @default("NOK")
  
  // Avtaler og Koder (Løser "Glemt kode"-problemet)
  discountCodeRequired String? @db.Text  // Koden som MÅ oppgis (f.eks. "Ref: 09991274" hos Merck)
  agreementReference  String?  @db.Text  // Referanse til avtalen (f.eks. "Labforum 2025")

  // CSV Import fields (from VAREKARTOTEK.csv)
  packageDescription  String?  @db.Text  // Forpakning (f.eks. "10stk/eske")
  quantityPerPackage  Decimal? @db.Decimal(10, 2) // Enhet per pk (f.eks. "10 stk" -> 10)
  discountNotes      String?  @db.Text  // % rabatt details
  priceCheckSignature String? @db.Text  // Pris-sjekk Sign. (raw text before parsing)

  // MANGLENDE FELTER - Innkjøpsdetaljer og Prisstyring
  discountPercentage  Decimal? @db.Decimal(5, 2) // Eksplisitt rabatt % (f.eks. 30.00 for 30%)
  priceEvaluationStatus String? @db.Text          // "Ikke vurdert", "Finnes Billigere", "OK"
  lastVerifiedBy      String?  @db.Text          // Initialer til den som sjekket prisen (f.eks. "ILK")
  supplierRole        String?  @default("PRIMARY") // "PRIMARY", "SECONDARY", "BACKUP"

  // Vedlikehold og Gyldighet
  priceValidUntil     DateTime? // For tidsbegrensede tilbud
  lastVerifiedDate    DateTime @default(now()) @updatedAt // Når ble prisen sist bekreftet?
  
  // Metadata
  isPrimarySupplier   Boolean  @default(false)  // Er dette hovedleverandøren for denne varen?
  minimumOrderQty     Int?     // Minimum bestillingsantall
  packSize           Int?      // Pakningsstørrelse
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([itemId, supplierId])
  @@index([itemId])
  @@index([supplierId])
}

model Item {
  id              String       @id @default(cuid())
  sku             String       @unique
  name            String
  description     String?      @db.Text
  manufacturer    String?      @db.Text  // Produsent
  
  // CSV Import fields (from VAREKARTOTEK.csv)
  externalId      String?      @unique              // Kartotek ID (critical for import tracking)
  hmsCodes        String?      @db.Text             // Sikkerhet* (HMS codes like O, F, T+)
  certificationInfo String?    @db.Text             // Merking/Sertifikat
  internalReference String?    @db.Text             // EK ref.
  
  // Kategorisering (kun relasjoner - ingen enum)
  departmentId    String?
  department      Department?  @relation(fields: [departmentId], references: [id])
  categoryId      String?
  category        Category?    @relation(fields: [categoryId], references: [id])
  
  // Enheter og mengder
  unit            Unit         @default(UNIT)        // Lagerenhet
  orderUnit       Unit?        // Bestillingsenhet
  conversionFactor Int?        // Hvor mange lagerenheter per bestillingsenhet
  contentPerPack  String?      @db.Text             // Enhet per pk (fra Excel)
  
  // Kun salgspris (innkjøpspris flyttet til SupplierItem)
  salesPrice      Decimal?     @db.Decimal(10, 2)   // Pris ut til kunde
  currency        String?      @default("NOK")
  
  // Lagerstyring
  minStock        Int          @default(0)          // Minstebeholdning (alarm)
  maxStock        Int?                              // Maksimum lagernivå
  
  // Sporingskrav (kritiske for lab)
  requiresLotNumber Boolean    @default(false)      // Krever_Lotnummer
  expiryTracking  Boolean      @default(false)      // Krever_Utløpsdato
  hazardous       Boolean      @default(false)      // HMS_Sikkerhet
  
  // MANGLENDE FELTER - Innkjøpsprosess
  standingOrderDetails String? @db.Text             // Fastbestilling info (f.eks. "Labolytic", "Hver 3. mnd")
  
  // Tilleggsinformasjon
  barcode         String?      @unique              // Leverandørens strekkode (1D)
  qrCode          String?      @unique              // Intern QR-kode (2D) 
  storageTemp     String?      @db.Text
  hmsCode         String?      @db.Text             // HMS-koder (legacy - use hmsCodes)
  notes           String?      @db.Text

  // Relasjoner
  supplierId      String?      // DEPRECATED: Bruk supplierItems i stedet
  supplier        Supplier?    @relation(fields: [supplierId], references: [id])
  
  defaultLocationId String?
  defaultLocation Location?    @relation(fields: [defaultLocationId], references: [id])

  // Ny prisbok-relasjon
  supplierItems   SupplierItem[]
  
  // Multiple barcode support
  barcodes        ItemBarcode[]

  lots            InventoryLot[]
  orderLines      PurchaseOrderLine[]
  receiptLines    ReceiptLine[]
  discounts       Discount[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Performance indexes for frequently queried fields
  @@index([name])
  @@index([sku])
  @@index([categoryId])
  @@index([departmentId])
  @@index([minStock])
  @@index([createdAt])
}

// New model for supporting multiple barcodes per item
model ItemBarcode {
  id          String      @id @default(cuid())
  itemId      String
  item        Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  barcode     String      @unique
  type        BarcodeType @default(GTIN)
  description String?     @db.Text  // Optional description (e.g., "Supplier A GTIN", "Internal code")
  isPrimary   Boolean     @default(false)  // One primary barcode per item
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([itemId])
  @@index([barcode])
}

enum BarcodeType {
  GTIN        // Global Trade Item Number (from GS1)
  EAN         // European Article Number
  UPC         // Universal Product Code
  INTERNAL    // Internal company code
  SUPPLIER    // Supplier-specific code
  QR          // QR code
  OTHER       // Other barcode types
}

model Discount {
  id          String   @id @default(cuid())
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id])
  supplierId  String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  percent     Decimal? @db.Decimal(5, 2)
  amount      Decimal? @db.Decimal(10, 2)
  startsAt    DateTime @default(now())
  endsAt      DateTime?
}

// Stock is tracked per lot/batch at a specific location, with optional expiry
model InventoryLot {
  id          String   @id @default(cuid())
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id])
  locationId  String
  location    Location @relation(fields: [locationId], references: [id])
  lotNumber   String?
  expiryDate  DateTime?
  quantity    Int      @default(0)

  // KRITISK: Alle endringer spores via transaksjoner
  transactions        InventoryTransaction[]
  cycleCountingLines  CycleCountingLine[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Unique constraint includes lotNumber and expiryDate for proper batch tracking
  @@unique([itemId, locationId, lotNumber, expiryDate])
  @@index([itemId, locationId])
}

enum OrderStatus {
  REQUESTED    // Forespurt (ny forespørsel fra ansatt)
  APPROVED     // Godkjent (leder har godkjent)
  ORDERED      // Bestilt (sendt til leverandør)
  PARTIAL      // Delvis mottatt
  RECEIVED     // Fullført (alt mottatt)
  CANCELLED    // Kansellert
}

enum Priority {
  LOW          // Normal
  MEDIUM       // Viktig
  HIGH         // Haster
  URGENT       // Kritisk
}

model PurchaseOrder {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  supplierId      String
  supplier        Supplier    @relation(fields: [supplierId], references: [id])
  status          OrderStatus @default(REQUESTED)
  priority        Priority    @default(MEDIUM)
  
  // Datoer og sporing (KRITISK: Bruk User-referanser for audit trail)
  requestedBy     String      // Hvem forespurte (PÅKREVD for sporbarhet)
  requester       User        @relation(fields: [requestedBy], references: [id])
  requestedDate   DateTime    @default(now())  // Registrert dato
  approvedBy      String?     // Hvem godkjente
  approvedDate    DateTime?   // Godkjent dato
  orderedDate     DateTime?   // Bestilt dato
  expectedDate    DateTime?   // Forventes dato
  
  // Leverandør referanse
  supplierOrderNumber String? @db.Text  // Ordrenr. fra leverandør
  
  notes           String?     @db.Text
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  lines           PurchaseOrderLine[]
  receipts        Receipt[]
  transactions    InventoryTransaction[]
  
  // Performance indexes for frequently queried fields
  @@index([status])
  @@index([requestedDate])
  @@index([supplierId])
  @@index([requestedBy])
}

model PurchaseOrderLine {
  id                String        @id @default(cuid())
  orderId           String
  order             PurchaseOrder @relation(fields: [orderId], references: [id])
  itemId            String
  item              Item          @relation(fields: [itemId], references: [id])
  
  // Bestilling
  quantityOrdered   Int           // Antall_Bestilt
  unitPrice         Decimal?      @db.Decimal(10, 2)  // Pris pk
  currency          String?       @default("NOK")
  
  // Sporing av mottak
  quantityReceived  Int           @default(0)  // Antall_Mottatt_Hittil
  
  // Avdeling som forespurte
  departmentId      String?
  requestedDepartment Department? @relation(fields: [departmentId], references: [id])
  
  notes             String?       @db.Text
}

model Receipt {
  id          String   @id @default(cuid())
  orderId     String?
  order       PurchaseOrder? @relation(fields: [orderId], references: [id])
  
  // Mottaksinformasjon (KRITISK: Bruk User-referanse for sporbarhet)
  receivedAt  DateTime @default(now())  // Mottatt_Dato
  receivedBy  String                    // Hvem registrerte (PÅKREVD)
  receiver    User     @relation(fields: [receivedBy], references: [id])
  
  // Leverandør referanse (hvis ikke koblet til bestilling)
  supplierId  String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  
  notes       String?  @db.Text

  lines         ReceiptLine[]
  transactions  InventoryTransaction[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReceiptLine {
  id           String   @id @default(cuid())
  receiptId    String
  receipt      Receipt  @relation(fields: [receiptId], references: [id])
  itemId       String
  item         Item     @relation(fields: [itemId], references: [id])
  locationId   String
  location     Location @relation(fields: [locationId], references: [id])
  lotNumber    String?
  expiryDate   DateTime?
  quantity     Int
}

// KRITISK: Full sporbarhet av alle lagerbevegelser
model InventoryTransaction {
  id              String          @id @default(cuid())
  type            TransactionType // RECEIPT, CONSUMPTION, ADJUSTMENT, TRANSFER
  
  // Hvilken lot påvirkes
  inventoryLotId  String
  lot             InventoryLot    @relation(fields: [inventoryLotId], references: [id])
  
  // Endringen
  quantityChange  Int             // Positivt for inn, negativt for ut
  quantityBefore  Int             // Beholdning før transaksjonen
  quantityAfter   Int             // Beholdning etter transaksjonen
  
  // Kostnadsberegning
  unitCost        Decimal?        @db.Decimal(10, 2)  // Kostnad per enhet
  totalValue      Decimal?        @db.Decimal(10, 2)  // Total verdi av transaksjonen
  
  // Sporbarhet og dokumentasjon
  notes           String?         @db.Text
  reasonCode      String?         // Standardisert årsakskode (f.eks. "EXPIRED", "DAMAGED", "ANALYSIS")
  
  // Hvem utførte transaksjonen (KRITISK for audit trail)
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  
  // Koblinger til relaterte dokumenter
  orderId         String?
  order           PurchaseOrder?  @relation(fields: [orderId], references: [id])
  receiptId       String?
  receipt         Receipt?        @relation(fields: [receiptId], references: [id])
  countingSessionId String?
  countingSession CycleCountingSession? @relation(fields: [countingSessionId], references: [id])
  
  createdAt       DateTime        @default(now())
  
  @@index([inventoryLotId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// Strukturert varetelling for å håndtere avvik
model CycleCountingSession {
  id              String         @id @default(cuid())
  name            String         // F.eks. "Månedstelling Januar 2025 - Hovedlager"
  description     String?        @db.Text
  status          CountingStatus @default(PLANNED)
  isBlind         Boolean        @default(false) // Skjul systemQuantity for tellere
  recountThresholdPercent Int    @default(10)    // Terskel for obligatorisk omtelling
  requireRecountAboveThreshold Boolean @default(true)
  
  // Scope - hvilke varer skal telles
  locationId      String?
  location        Location?      @relation(fields: [locationId], references: [id])
  categoryId      String?
  category        Category?      @relation(fields: [categoryId], references: [id])
  departmentId    String?
  department      Department?    @relation(fields: [departmentId], references: [id])
  
  // Workflow og sporbarhet
  plannedBy       String         // Hvem planla tellingen
  planner         User           @relation("PlannedBy", fields: [plannedBy], references: [id])
  countedBy       String?        // Hvem utførte tellingen
  counter         User?          @relation("CountedBy", fields: [countedBy], references: [id])
  approvedBy      String?        // Hvem godkjente justeringene
  approver        User?          @relation("ApprovedBy", fields: [approvedBy], references: [id])
  
  // Tidspunkter
  plannedDate     DateTime       // Når skal tellingen utføres
  startedAt       DateTime?      // Når ble tellingen startet
  completedAt     DateTime?      // Når ble tellingen fullført
  approvedAt      DateTime?      // Når ble justeringene godkjent
  
  // Statistikk
  totalItems      Int            @default(0)  // Totalt antall lots å telle
  countedItems    Int            @default(0)  // Antall lots talt
  discrepancies   Int            @default(0)  // Antall avvik funnet
  
  notes           String?        @db.Text
  
  // Relasjoner
  lines           CycleCountingLine[]
  transactions    InventoryTransaction[]
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([status])
  @@index([plannedDate])
}

// Individuelle tellelinjer
model CycleCountingLine {
  id              String              @id @default(cuid())
  sessionId       String
  session         CycleCountingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // Hvilket lot telles
  inventoryLotId  String
  lot             InventoryLot        @relation(fields: [inventoryLotId], references: [id])
  
  // Telling
  systemQuantity  Int                 // Forventet antall (fra system)
  countedQuantity Int?                // Faktisk talt antall
  discrepancy     Int                 @default(0)  // Differanse (counted - system)
  needsRecount    Boolean             @default(false)
  scannedGtin     String?
  scannedLotNumber String?
  scannedExpiryDate DateTime?
  lotMismatch     Boolean             @default(false)
  reasonCode      String?
  
  notes           String?             @db.Text     // F.eks. "Fant 2 ødelagte flasker"
  
  // Sporbarhet
  countedAt       DateTime?           // Når ble denne linjen talt
  countedBy       String?             // Hvem talde denne linjen
  counter         User?               @relation(fields: [countedBy], references: [id])
  
  createdAt       DateTime            @default(now())
  
  @@unique([sessionId, inventoryLotId])
}
